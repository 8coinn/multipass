# Add the subdir here to avoid polluting their cmake scope
if (MSVC)
  # Prevent some warnings from causing a build error for gGPC with MSVC
  add_definitions(/wd4005 /wd4018 /wd4774 /wd4996 /wd4987 /wd5026)
  set(CMAKE_EXE_LINKER_FLAGS  "${CMAKE_EXE_LINKER_FLAGS} /ignore:4006 /ignore:4221")
  set(CMAKE_SHARED_LINKER_FLAGS  "${CMAKE_SHARED_LINKER_FLAGS} /ignore:4006 /ignore:4221")
endif (MSVC)

if (NOT MSVC)
  # Workaround for zlib placing its generated zconf.h file in the build dir,
  # and protobuf not knowing so finding the system version instead
  include_directories(${CMAKE_BINARY_DIR}/3rd-party/grpc/third_party/zlib)
endif ()

add_subdirectory(grpc EXCLUDE_FROM_ALL)

# Generates gRPC and protobuf C++ sources and headers from the given .proto files
#
# generate_grpc_cpp (<SRCS> <DEST> [<ARGN>...])
#
#  SRCS - output list of autogenerated source files
#  DEST - the output directory where the autogenerated files will be created in
#  ARGN - the .proto files
#
function(generate_grpc_cpp SRCS DEST)
  if (NOT ARGN)
    message(SEND_ERROR "Error: generate_grpc_cpp() called without any proto files")
    return()
  endif ()

  set(${SRCS})
  foreach (FIL ${ARGN})
    get_filename_component(ABS_FIL ${FIL} ABSOLUTE)
    get_filename_component(FIL_WE ${FIL} NAME_WE)
    get_filename_component(FIL_DIR ${ABS_FIL} DIRECTORY)

    list(APPEND ${SRCS} "${DEST}/${FIL_WE}.grpc.pb.cc")
    list(APPEND HDRS "${DEST}/${FIL_WE}.grpc.pb.h")
    list(APPEND ${SRCS} "${DEST}/${FIL_WE}.pb.cc")
    list(APPEND HDRS "${DEST}/${FIL_WE}.pb.h")

    add_custom_command(
      OUTPUT "${DEST}/${FIL_WE}.grpc.pb.cc"
      "${DEST}/${FIL_WE}.grpc.pb.h"
      "${DEST}/${FIL_WE}.pb.cc"
      "${DEST}/${FIL_WE}.pb.h"
      COMMAND $<TARGET_FILE:protoc>
      ARGS --grpc_out=${DEST} --cpp_out=${DEST} --proto_path=${FIL_DIR} --plugin=protoc-gen-grpc=$<TARGET_FILE:grpc_cpp_plugin> ${ABS_FIL}
      DEPENDS ${ABS_FIL} protoc grpc_cpp_plugin
      COMMENT "Running gRPC C++ protocol buffer compiler on ${FIL}"
      VERBATIM)
  endforeach ()

  set_source_files_properties(${${SRCS}} ${HDRS} PROPERTIES GENERATED TRUE)
  # compilers may complain about int->uint conversion generated by protobuf's macros
  # workaround for https://github.com/google/protobuf/pull/3174
  # Also protobuf uses a compiler extension (namely extended-offsetof), which -Wall can warn about
  # See https://github.com/google/protobuf/issues/1947
  if (NOT MSVC)
    set_source_files_properties(${${SRCS}} PROPERTIES COMPILE_FLAGS "-Wno-narrowing -Wno-extended-offsetof")
  else ()
    # also hide another warning about missing delete for new, leaks memory if exception thrown
    set_source_files_properties(${${SRCS}} PROPERTIES COMPILE_FLAGS "/wd4838 /wd4291")
  endif ()
  set(${SRCS} ${${SRCS}} PARENT_SCOPE)
endfunction()

list(APPEND gRPC_STATIC_LIBS grpc++ libprotobuf zlibstatic)
set(gRPC_STATIC_LIBRARIES "${gRPC_STATIC_LIBS}" PARENT_SCOPE)

list(APPEND gRPC_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/grpc/include")
list(APPEND gRPC_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/grpc/third_party/protobuf/src")
set(gRPC_INCLUDE_DIRS ${gRPC_INCLUDE_DIRS} PARENT_SCOPE)

# YAML C++
# Disable tests here to avoid double-including gtest
option(YAML_CPP_BUILD_TOOLS OFF)
option(YAML_CPP_BUILD_CONTRIB OFF)

add_subdirectory(yaml-cpp EXCLUDE_FROM_ALL)

list(APPEND yaml_cpp_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/yaml-cpp/include")
set(yaml_cpp_INCLUDE_DIRS "${yaml_cpp_INCLUDE_DIRS}" PARENT_SCOPE)

# Hyperkit - MacOS virtualization (via xhyve)
if (APPLE)
  # hyperkit happily builds with QCow2 support disabled if it is not available
  execute_process(
    COMMAND opam list qcow
    RESULT_VARIABLE QCOW_SUPPORT_FOUND
    OUTPUT_QUIET
    )

  if (NOT QCOW_SUPPORT_FOUND EQUAL 0)
    message(FATAL_ERROR "The 'qcow' package of the OPAM OCaml system is required. Check the README\nThe command 'opam list qcow' returned: ${QCOW_SUPPORT_FOUND}")
  endif ()

  if(NOT DEFINED ENV{OCAML_TOPLEVEL_PATH})
    message(FATAL_ERROR "The OCaml OPAM environment has not been set. Run 'eval `opam config env`' or check the README")
  endif()

  include(ExternalProject)
  ExternalProject_Add(hyperkit
    SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/hyperkit"
    CONFIGURE_COMMAND ""
    BUILD_COMMAND make
    BUILD_IN_SOURCE 1
    INSTALL_COMMAND cp "${CMAKE_CURRENT_SOURCE_DIR}/hyperkit/build/hyperkit" "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}"
    TEST_COMMAND "" # make test is available, but quite heavy-weight (download a VM & needs root)
    )
endif (APPLE)

# Qt Base - Text Wrapper lib taken from QCommandLineParser
add_subdirectory(qtbase EXCLUDE_FROM_ALL)

list(APPEND wrap_text_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/qtbase")
set(wrap_text_INCLUDE_DIRS "${wrap_text_INCLUDE_DIRS}" PARENT_SCOPE)

# libssh config
add_subdirectory(libssh EXCLUDE_FROM_ALL)
